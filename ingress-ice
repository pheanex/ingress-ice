#!/bin/bash

# ingress-ice start script by Nikitakun
# From version 2.2 you don't need to edit anything. Just launch this script from console ( $ chmod +x ingress-ice&&./ingress-ice )

echo_help() {
	echo "Ingress ICE"
	echo
	echo "Usage:"
	echo "  ingress-ice [-c 100] [-i settings.txt] [-l] [-r]"
	echo "  ingress-ice -h | -?"
	echo "  ingress-ice -a"
	echo
	echo "Options:"
	echo "  -h -?        Show this help"
	echo "  -r           Rewrite existing config file with a new one"
	echo "  -a           Show authors"
	echo "  -i <file>    Read settings from <file> or create config if not exists"
	echo "  -l           Text-mode instead of pseudographics"
	echo
	echo "Please visit http://ingress.divshot.io/ or http://github.com/nibgd/ingress-ice for additional help"
	echo
	exit
}

cleanup() {
	echo
	rm -f "$tempfile"
	exit
}

exit_ice() {
	if [[ ! "$TEXT" ]]; then
		$DIALOG --title "Ingress Ice" --backtitle "Exit" --clear --yesno "Do you wish to exit?" 7 24
		if [[ $? == 0 ]]; then
			cleanup
		fi
	else
		read -p "Do you wish to exit? (y/n) " yn
		if [[ "$yn" == [Yy]* ]]; then
			cleanup
		fi
	fi
}

empty_ice() {
	if [[ ! "$TEXT" ]]; then
		$DIALOG --title "Error" --backtitle "ERROR" --msgbox "This value cannot be empty" 7 32
		[[ $? != 0 ]] && exit_ice
	else
		echo "This value cannot be empty." >&2
	fi
}

set_option() {
	eval "$1=\$2"
}

set_var() {
	if [[ $? == 0 ]]; then
		set_option "$1" "$2"
		return 0
	else
		exit_ice
	fi
}

check_empty_and_set_var() {
	if [[ $1 == 0 ]]; then
		set_option "$2" "$3"
		if ! [[ "$3" ]]; then
			empty_ice
			return 1
		else
			return 0
		fi
	else
		exit_ice
		return 1
	fi
}

settings_correct() {
	if [[ ! "$TEXT" ]]; then
		$DIALOG --title "Check settings" --clear --yesno "Take $NUMBER (0 = infinity) screenshots $WIDTH x $HEIGHT every $DELAY seconds of portals from $MIN_LEVEL to $MAX_LEVEL\n\nAre the settings correct? " 10 60
		return $?
	else
		echo ""
		echo "Take $NUMBER (0 = infinity) screenshots $WIDTH x $HEIGHT every $DELAY seconds of portals from $MIN_LEVEL to $MAX_LEVEL"
		read -p "Are the settings correct? (Y/n): " yn
		while true; do
			case $yn in
			[Yy]* ) return 0
					;;
			[Nn]* ) return 1
					;;
			* ) echo "Please answer y(es) or n(o)."
				;;
			esac
		done
	fi
}

write_config() {
	echo "$VERSION $EMAIL $PASSWORD $LINK $MIN_LEVEL $MAX_LEVEL $DELAY $WIDTH $HEIGHT ./ $NUMBER $IITC $TIMESTAMP" > "$CONFIG_FILE"
}

user_input() {
	if ! [[ "$TEXT" ]]; then
		while :; do
			$DIALOG --backtitle "Step 1 of 10" --title "Location Link" --clear \
					--inputbox "To get your location link:\n  1) Go to http://ingress.com/intel\n  2) Scroll the map to your location and zoom\n  3) Click the [Link] button on the right top of the screen and copy that link\n  4) [Shift]+[Insert] to paste" 12 52 2> "$tempfile"
			check_empty_and_set_var $? LINK "$(cat "$tempfile")" && break
		done

		$DIALOG --backtitle "Choose auth method" --defaultno --title "Authentication Method" --clear --yesno "Do you want to authenticate using cookies? (for advanced users only)" 9 50
		set_option USE_COOKIE $?

		if [[ "$USE_COOKIE" == 0 ]]; then
			VERSION=2
		 	while :; do
				$DIALOG --backtitle "Step 2 of 10" --title "SACSID cookie" --clear --inputbox "Enter the contents of your SACSID cookie:" 8 40 2> "$tempfile"
				check_empty_and_set_var $? EMAIL "$(cat "$tempfile")" && break
		 	done
			while :; do
				$DIALOG --backtitle "Step 3 of 10" --title "CSRF cookie" --clear --inputbox "Enter the contents of your CSRFToken cookie:" 8 40 2> "$tempfile"
				check_empty_and_set_var $? PASSWORD "$(cat "$tempfile")" && break
	 		done
		else
			VERSION=1
		   	while :; do
				$DIALOG --backtitle "Step 2 of 10" --title "Google Login" --clear --inputbox "Please enter your Google Login:" 8 40 2> "$tempfile"
				check_empty_and_set_var $? EMAIL "$(cat "$tempfile")" && break
		 	done
		 	while :; do
				$DIALOG --backtitle "Step 3 of 10" --title "Google Password" --clear --passwordbox "Please enter your Google Password: " 10 40 2> "$tempfile"
				check_empty_and_set_var $? PASSWORD "$(cat "$tempfile")" && break
		 	done
	 	fi

		$DIALOG --backtitle "Step 4 of 10" --title "Delay" --clear --inputbox "Delay between screenshots in seconds: ([ENTER] for default 120)" 10 40 2> "$tempfile"
		set_var DELAY "$(cat "$tempfile")"

		$DIALOG --backtitle "Step 5 of 10" --title "Width" --clear --inputbox "Screenshots' width in pixels: ([ENTER] for default 1366)" 8 40 2> "$tempfile"
		set_var WIDTH "$(cat "$tempfile")"

		$DIALOG --backtitle "Step 6 of 10" --title "Height" --clear --inputbox "Screenshots' height in pixels: ([ENTER] for default 768)" 8 40 2> "$tempfile"
		set_var HEIGHT "$(cat "$tempfile")"

		$DIALOG --backtitle "Step 7 of 10" --title "Number" --clear --inputbox "Number of screenshots to take ([ENTER] for default infinity)" 8 52 2> "$tempfile"
		set_var NUMBER "$(cat "$tempfile")"

		$DIALOG --backtitle "Step 8 of 10" --defaultno --title "Filter" --clear --yesno "Do you want to filter portals by level?" 8 50
		set_option FILTER_LEVEL $?

		if [[ "$FILTER_LEVEL" == 0 ]]; then
			while :; do
				$DIALOG --backtitle "Extra step" --title "Filter" --clear --inputbox "Minimal portal level ([ENTER] for default 1):" 8 32 2> "$tempfile"
				check_empty_and_set_var $? MIN_LEVEL "$(cat "$tempfile")" && break
			done
			while :; do
				$DIALOG --backtitle "Extra step" --title "Filter" --clear --inputbox "Maximum portal level ([ENTER] for default 8):" 8 32 2> "$tempfile"
				check_empty_and_set_var $? MAX_LEVEL "$(cat "$tempfile")" && break
			done
		fi

		$DIALOG --backtitle "Step 9 of 10" --defaultno --title "IITC" --clear --yesno "Do you want to inject IITC (white background)?" 8 50
		if [[ $? == 0 ]]; then
			set_option IITC 1
		else
			set_option IITC 0
		fi

		$DIALOG --backtitle "Step 10 of 10" --defaultno --title "Timestamp" --clear --yesno "Do you want to put a timestamp on your screenshots?" 8 50
		if [[ $? == 0 ]]; then
			set_option TIMESTAMP 1
		else
			set_option TIMESTAMP 0
		fi
	else
		while true; do
			echo "To get your location link:"
			echo "  1) Go to http://ingress.com/intel"
			echo "  2) Scroll the map to your location and zoom"
			echo "  3) Click the [Link] button on the right top of the screen and copy that link"
			echo ""
			echo "Enter your location link and press [Enter]: ([Shift]+[Insert] to paste)"
			read LINK
			check_empty_and_set_var $? LINK "$LINK" && break
		done
		while true; do
			read -p "Do you want to authenticate using cookies (Advanced users only; faster loading)? (y/N): " yn
			case $yn in
				[Yy]* ) VERSION="2"
						break
						;;
				[Nn]*|* ) VERSION="1"
						break
						;;
			esac
		done
		if [[ "$VERSION" = "1" ]]; then
			while true; do
				read -p "Your Google login: " EMAIL
				check_empty_and_set_var $? EMAIL "$EMAIL" && break
			done
			while true; do
				read -p "Your Google password: " -s PASSWORD
				echo
				check_empty_and_set_var $? PASSWORD "$PASSWORD" && break
			done
		fi
		if [[ "$VERSION" = "2" ]]; then
			while true; do
				read -p "Your SACSID cookie: " EMAIL
				check_empty_and_set_var $? EMAIL "$EMAIL" && break
			done
			while true; do
				read -p "Your CSRFToken cookie: " PASSWORD
				check_empty_and_set_var $? PASSWORD "$PASSWORD" && break
			done
		fi

		read -p "Delay between screenshots in seconds (default 120): " DELAY
		read -p "Minimal portal level (default 1): " MIN_LEVEL
		read -p "Maximum portal level (default 8): " MAX_LEVEL
		read -p "Screenshots' width in pixels: (default 1366): " WIDTH
		read -p "Screenshots' height: (default 768): " HEIGHT
		read -p "Number of screenshots to take, '0' for infinity (default 0): " NUMBER
		while true; do
			read -p "Do you want to inject IITC (white background)? (y/N): " yn
			case $yn in
				[Yy]* ) IITC="1"
						break
						;;
				[Nn]*|* ) IITC="0"
						break
						;;
			esac
		done
		while true; do
			read -p "Do you want to put a timestamp on your screenshots? (y/N): " yn
			case $yn in
				[Yy]* ) TIMESTAMP="1"
						break
						;;
				[Nn]*|* ) TIMESTAMP="0"
						break
						;;
			esac
		done
	fi

	# Set Defaults
	DELAY=${DELAY:-'120'}
	MIN_LEVEL=${MIN_LEVEL:-'1'}
	MAX_LEVEL=${MAX_LEVEL:-'8'}
	WIDTH=${WIDTH:-'1366'}
	HEIGHT=${HEIGHT:-'768'}
	NUMBER=${NUMBER:-'0'}
	TIMESTAMP=${TIMESTAMP:-'0'}
	IITC=${IITC:-'0'}

	if settings_correct; then
		write_config
	else
		user_input
	fi
}

CONFIG_FILE="$HOME/.ingress_ice"
MACHINE_TYPE=$(uname -m)

if [[ "$OSTYPE" = "darwin"* ]]; then
	PHANTOMJS="./phantomjs-osx"
else
	if [[ "$MACHINE_TYPE" = 'x86_64' ]]; then
		PHANTOMJS="./phantomjs"
	else
		PHANTOMJS="./phantomjs64"
	fi
fi

if which dialog >/dev/null; then
	DIALOG=dialog
else
	if which whiptail >/dev/null; then
		DIALOG=whiptail
	else
		TEXT=true
	fi
fi

if ! [[ "$TEXT" ]]; then
	tempfile=$(tempfile 2>/dev/null) || tempfile=/tmp/test$$
	trap 'cleanup' 2 3 15
fi

while getopts "h?rlc:ai:" opt; do
	case "$opt" in
		h|\?)  echo_help
			;;
		i)  CONFIG_FILE="$OPTARG"
			;;
		a)  if [[ ! "$TEXT" ]]; then
				$DIALOG --title "Credits" --msgbox "Ingress ICE (Distributed under the MIT License)\n\nAuthors:\n  Nikitakun (http://github.com/nibogd) @ni_bogd" 10 52
			else
				echo "Ingress ICE (Distributed under the MIT License)"
				echo ""
				echo "Authors:"
				echo "  Nikitakun (http://github.com/nibogd) @ni_bogd"
				echo ""
			fi
			exit
			;;
		l)  TEXT=true
			;;
		r)  user_input
			break
			;;
	esac
done

[[ ! -r "$CONFIG_FILE" ]] && user_input

${PHANTOMJS} ice.js $(cat "$CONFIG_FILE")
